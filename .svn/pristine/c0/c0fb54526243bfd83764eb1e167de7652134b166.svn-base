<template>
  <div>
    <el-row>
      <el-col :span="11" v-if="init.largeArea">
        <el-form-item label="大区域">
          <el-select
            v-model="data.largeAreaValue"
            @change="handlelargeArea"
            style="width:60%"
          >
            <el-option
              v-for="item in data.largeArea"
              :key="item.id"
              :value="item.id"
              :label="item.name"
            ></el-option>
          </el-select>
        </el-form-item>
      </el-col>
      <el-col :span="11" :offset="1" v-if="init.areas">
        <el-form-item label="区域">
          <el-select
            v-model="data.areasValue"
            @change="handleAreas"
            style="width:60%"
          >
            <el-option
              v-for="item in data.areas"
              :key="item.id"
              :value="item.id"
              :label="item.name"
            ></el-option>
          </el-select>
        </el-form-item>
      </el-col>
    </el-row>
    <el-row v-if="init.statitions || init.sensors">
      <el-col :span="11" v-if="init.statitions">
        <el-form-item label="采集站">
          <el-select
            v-model="data.statitionsValue"
            @change="handleStatitions"
            style="width:60%"
          >
            <el-option
              v-for="item in data.statitions"
              :key="item.id"
              :value="item.id"
              :label="item.name"
            ></el-option>
          </el-select>
        </el-form-item>
      </el-col>
      <el-col :span="11" v-if="init.sensors">
        <el-form-item label="传感器">
          <el-select
            v-model="data.sensorsValue"
            @change="handleSensors"
            style="width:60%"
          >
            <el-option
              v-for="item in data.sensors"
              :key="item.id"
              :value="item.id"
              :label="item.name"
            ></el-option>
          </el-select>
        </el-form-item>
      </el-col>
    </el-row>
  </div>
</template>

<script>
// import { reqareas, reqStatitions, reqSensors } from "../../api/common";
import { watch, onBeforeMount, reactive } from "@vue/composition-api";
import { sensorPicker } from "./sensorPicker";
export default {
  name: "Sensorpicker",
  props: {
    sensorPickerLevel: {
      type: Array,
      default: () => []
    },
    sensorData: {
      type: Object,
      default: () => {}
    }
  },
  setup(props, { root, emit }) {
    console.log(props.sensorData);
    // 初始化省市区联动
    const init = reactive({
      largeArea: false,
      areas: false,
      statitions: false,
      sensors: false
    });
    const {
      // 事件
      getlargeArea,
      // getareas,
      handleAreas,
      handlelargeArea,
      handleStatitions,
      handleSensors,
      // 数据集合
      data,
      resultData

      // 下拉赋值
      // areas,
      // statitions,
      // sensors,
      // // 数据绑定
      // areasValue,
      // statitionsValue,
      // sensorsValue
    } = sensorPicker();
    /* 初始化 */
    const initSensorpicker = () => {
      console.log(props.sensorPickerLevel);
      let initData = props.sensorPickerLevel;
      if (initData.length === 0) {
        for (let key in init) {
          init[key] = true;
        }
      } else {
        initData.forEach(element => {
          init[element] = true;
        });
      }
    };
    watch(
      [
        () => resultData.largeAreaValue,
        () => resultData.areasValue,
        () => resultData.statitionsValue,
        () => resultData.sensorsValue
      ],
      ([largeArea, areas, statitions, sensors]) => {
        emit("update:sensorData", resultData);
        console.log(resultData);
      }
    );
    // const data = reactive({
    //   // 区域列表
    //   areas: [],
    //   // 选中区域
    //   areasValue: "",
    //   // 采集站列表
    //   statitions: [],
    //   // 选中区域
    //   statitionsValue: "",
    //   sensors: [],
    //   sensorsValue: ""
    // });
    // 获取区域
    // const getareas = () => {
    //   reqareas().then(res => {
    //     console.log(res.data);
    //     data.areas = res.data.data;
    //   });
    // };
    // 选择区域获取采集站
    // const handleAreas = val => {
    //   reqStatitions().then(res => {
    //     console.log(res);
    //     data.statitions = res.data.data;
    //   });
    // };
    // 选择采集站获取传感器
    // const handleStatitions = () => {
    //   reqSensors().then(res => {
    //     console.log(res);
    //     data.sensors = res.data.data;
    //   });
    // };
    // watch(
    //   () => areasValue.value,
    //   newValue => {
    //     console.log(newValue);
    //   }
    // );
    onBeforeMount(() => {
      // 初始化
      initSensorpicker();
      // 获取省份
      getlargeArea();
    });
    return {
      init,
      data,
      // 下拉赋值
      // areas,
      // statitions,
      // sensors,
      // // 数据绑定
      // areasValue,
      // statitionsValue,
      // sensorsValue,
      // 事件
      getlargeArea,
      // getareas,
      handlelargeArea,
      handleAreas,
      handleStatitions,
      handleSensors
    };
  }
};
</script>
<style lang="scss" scoped>
.el-row {
  margin-top: 10px;
}
</style>
